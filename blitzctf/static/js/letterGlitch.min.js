class LetterGlitch {
    constructor(options = {}) {
        this.glitchColors = options.glitchColors || ['#2b4539', '#61dca3', '#61b3dc'];
        this.glitchSpeed = options.glitchSpeed || 50;
        this.centerVignette = options.centerVignette !== undefined ? options.centerVignette : true;
        this.outerVignette = options.outerVignette !== undefined ? options.outerVignette : false;
        this.smooth = options.smooth !== undefined ? options.smooth : true;
        
        this.fontSize = 16;
        this.charWidth = 10;
        this.charHeight = 20;
        
        this.letters = [];
        this.grid = { columns: 0, rows: 0 };
        this.lastGlitchTime = Date.now();
        this.animationFrame = null;
        
        this.lettersAndSymbols = [
            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
            'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
            '!', '@', '#', '$', '&', '*', '(', ')', '-', '_', '+', '=', '/',
            '[', ']', '{', '}', ';', ':', '<', '>', ',', '0', '1', '2', '3',
            '4', '5', '6', '7', '8', '9'
        ];
        
        this.init();
    }
    
    init() {
        // Create canvas element
        this.canvas = document.createElement('canvas');
        this.canvas.style.position = 'fixed';
        this.canvas.style.top = '0';
        this.canvas.style.left = '0';
        this.canvas.style.width = '100%';
        this.canvas.style.height = '100%';
        this.canvas.style.zIndex = '-1';
        this.canvas.style.pointerEvents = 'none';
        document.body.appendChild(this.canvas);
        
        // Create vignette elements if needed
        if (this.centerVignette) {
            this.centerVignetteElement = document.createElement('div');
            this.centerVignetteElement.style.position = 'fixed';
            this.centerVignetteElement.style.top = '0';
            this.centerVignetteElement.style.left = '0';
            this.centerVignetteElement.style.width = '200%';
            this.centerVignetteElement.style.height = '200%';
            this.centerVignetteElement.style.pointerEvents = 'none';
            this.centerVignetteElement.style.zIndex = '-1';
            this.centerVignetteElement.style.background = 'radial-gradient(circle, rgba(0,0,0,0.8) 0%, rgba(0,0,0,0) 60%)';
            document.body.appendChild(this.centerVignetteElement);
        }
        
        if (this.outerVignette) {
            this.outerVignetteElement = document.createElement('div');
            this.outerVignetteElement.style.position = 'fixed';
            this.outerVignetteElement.style.top = '0';
            this.outerVignetteElement.style.left = '0';
            this.outerVignetteElement.style.width = '100%';
            this.outerVignetteElement.style.height = '100%';
            this.outerVignetteElement.style.pointerEvents = 'none';
            this.outerVignetteElement.style.zIndex = '-1';
            this.outerVignetteElement.style.background = 'radial-gradient(circle, rgba(0,0,0,0) 60%, rgba(0,0,0,1) 100%)';
            document.body.appendChild(this.outerVignetteElement);
        }
        
        this.context = this.canvas.getContext('2d');
        this.resizeCanvas();
        
        // Add event listeners
        window.addEventListener('resize', this.handleResize.bind(this));
        document.addEventListener('theme-change', this.handleThemeChange.bind(this));
        
        // Start animation
        this.animate();
    }
    
    getRandomChar() {
        return this.lettersAndSymbols[Math.floor(Math.random() * this.lettersAndSymbols.length)];
    }
    
    getRandomColor() {
        const colors = document.body.classList.contains('dark-theme') 
            ? ['#2b4539', '#61dca3', '#61b3dc']  // Dark theme colors
            : ['#4A90E2', '#5AA1F2', '#3A80D2']; // Light theme colors
        return colors[Math.floor(Math.random() * colors.length)];
    }
    
    hexToRgb(hex) {
        const shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
        hex = hex.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b);
        const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16)
        } : null;
    }
    
    interpolateColor(start, end, factor) {
        const result = {
            r: Math.round(start.r + (end.r - start.r) * factor),
            g: Math.round(start.g + (end.g - start.g) * factor),
            b: Math.round(start.b + (end.b - start.b) * factor),
        };
        return `rgb(${result.r}, ${result.g}, ${result.b})`;
    }
    
    calculateGrid(width, height) {
        const columns = Math.ceil(width / this.charWidth);
        const rows = Math.ceil(height / this.charHeight);
        return { columns, rows };
    }
    
    initializeLetters(columns, rows) {
        this.grid = { columns, rows };
        const totalLetters = columns * rows;
        this.letters = Array.from({ length: totalLetters }, () => ({
            char: this.getRandomChar(),
            color: this.getRandomColor(),
            targetColor: this.getRandomColor(),
            colorProgress: 1,
        }));
    }
    
    resizeCanvas() {
        const dpr = window.devicePixelRatio || 1;
        const rect = document.body.getBoundingClientRect();
        
        this.canvas.width = rect.width * dpr;
        this.canvas.height = rect.height * dpr;
        this.canvas.style.width = `${rect.width}px`;
        this.canvas.style.height = `${rect.height}px`;
        
        this.context.setTransform(dpr, 0, 0, dpr, 0, 0);
        
        const { columns, rows } = this.calculateGrid(rect.width, rect.height);
        this.initializeLetters(columns, rows);
        this.drawLetters();
    }
    
    drawLetters() {
        if (this.letters.length === 0) return;
        
        const { width, height } = this.canvas.getBoundingClientRect();
        this.context.clearRect(0, 0, width, height);
        this.context.font = `${this.fontSize}px monospace`;
        this.context.textBaseline = 'top';
        
        this.letters.forEach((letter, index) => {
            const x = (index % this.grid.columns) * this.charWidth;
            const y = Math.floor(index / this.grid.columns) * this.charHeight;
            this.context.fillStyle = letter.color;
            this.context.fillText(letter.char, x, y);
        });
    }
    
    updateLetters() {
        if (this.letters.length === 0) return;
        
        const updateCount = Math.max(1, Math.floor(this.letters.length * 0.05));
        
        for (let i = 0; i < updateCount; i++) {
            const index = Math.floor(Math.random() * this.letters.length);
            if (!this.letters[index]) continue;
            
            this.letters[index].char = this.getRandomChar();
            this.letters[index].targetColor = this.getRandomColor();
            
            if (!this.smooth) {
                this.letters[index].color = this.letters[index].targetColor;
                this.letters[index].colorProgress = 1;
            } else {
                this.letters[index].colorProgress = 0;
            }
        }
    }
    
    handleSmoothTransitions() {
        let needsRedraw = false;
        this.letters.forEach((letter) => {
            if (letter.colorProgress < 1) {
                letter.colorProgress += 0.05;
                if (letter.colorProgress > 1) letter.colorProgress = 1;
                
                const startRgb = this.hexToRgb(letter.color);
                const endRgb = this.hexToRgb(letter.targetColor);
                if (startRgb && endRgb) {
                    letter.color = this.interpolateColor(startRgb, endRgb, letter.colorProgress);
                    needsRedraw = true;
                }
            }
        });
        
        if (needsRedraw) {
            this.drawLetters();
        }
    }
    
    animate() {
        const now = Date.now();
        if (now - this.lastGlitchTime >= this.glitchSpeed) {
            this.updateLetters();
            this.drawLetters();
            this.lastGlitchTime = now;
        }
        
        if (this.smooth) {
            this.handleSmoothTransitions();
        }
        
        this.animationFrame = requestAnimationFrame(this.animate.bind(this));
    }
    
    handleResize() {
        if (this.resizeTimeout) {
            clearTimeout(this.resizeTimeout);
        }
        
        this.resizeTimeout = setTimeout(() => {
            cancelAnimationFrame(this.animationFrame);
            this.resizeCanvas();
            this.animate();
        }, 100);
    }
    
    handleThemeChange() {
        // Update colors when theme changes
        this.letters.forEach(letter => {
            letter.targetColor = this.getRandomColor();
            letter.colorProgress = 0;
        });
    }
    
    destroy() {
        cancelAnimationFrame(this.animationFrame);
        window.removeEventListener('resize', this.handleResize);
        document.removeEventListener('theme-change', this.handleThemeChange);
        this.canvas.remove();
        if (this.centerVignetteElement) this.centerVignetteElement.remove();
        if (this.outerVignetteElement) this.outerVignetteElement.remove();
    }
}
